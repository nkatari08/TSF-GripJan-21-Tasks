# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5aPWn9atgrQu349cYMCXoz0rbt-r49A

# TASK 1 
Predicting the score of a student based on the number of study hours .
"""



"""1. Import Libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#read data
url = "http://bit.ly/w-data" #dataset
data = pd.read_csv(url)
data.head()

"""2. Plot a Graph """

# Simple line plot 
x=data['Hours']
y=data['Scores']

# Plot
plt.scatter(x,y,c='blue')

# Decorate
plt.title('Hours vs Scores')
plt.xlabel('Hours')
plt.ylabel('Score/Marks')

plt.show()

"""From the above graph we see that relation between hours and scores is linear. Hence for analysis , we use linear regression .

a line is represented by y=mx+b . x and y are the variables , m is the slope and b is the y-intercept .
"""

x=data.iloc[:,:-1].values
y=data.iloc[:,1].values

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(x, y, 
                            test_size=0.2, random_state=0) # test size is 0.2 as we consider 20% of the sample as test set 


from sklearn.linear_model import LinearRegression  
model = LinearRegression()  
model.fit(X_train, y_train) 

print("Model trained.")

print ('Coefficients: ', model.coef_)
print ('Intercept: ',model.intercept_)

# Plotting for the test data
l = model.coef_*x+model.intercept_
plt.title('Regression Line')
plt.scatter(x, y)
plt.plot(x, l)
plt.show()

y_pred = model.predict(X_test)

datafrm = pd.DataFrame({'Hours': X_test[:,0], 'Actual Score': y_test, 'Predicted Score': y_pred})  
datafrm

"""For 9.25 study hours """

print('Number of hours: 9.25')
print('Predicted score: ', model.predict([[9.25]])[0])

"""EVAUATION - The accuracy of the model"""

from sklearn.metrics import r2_score
print("Mean absolute error: %.2f" % np.mean(np.absolute(y_pred - y_test)))
print("Residual sum of squares (MSE): %.2f" % np.mean((y_pred - y_test) ** 2))
print("R2-score: %.2f" % r2_score(y_pred , y_test) )